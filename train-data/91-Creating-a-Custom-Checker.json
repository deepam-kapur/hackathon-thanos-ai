{"url":"https://support.hackerrank.com/hc/en-us/articles/223080547-Creating-a-Custom-Checker","body":"<h2>Overview</h2>\n<p><span style=\"font-weight: 400;\">The scoring logic for coding questions is relatively straightforward, i.e., making sure each test case result is an exact match. Some of the questions may have more than one acceptable correct answer. For example, \"List of 5 prime numbers under 100\"; therefore, such questions can be accommodated under the </span><a href=\"https://support.hackerrank.com/hc/en-us/articles/219875648-Approximate-Solution\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">Approximate </span><span style=\"font-weight: 400;\">Solution</span></a><span style=\"font-weight: 400;\"> type. </span></p>\n<p><span style=\"font-weight: 400;\">When creating an Approximate Solution type question, the final step is writing a custom checker. A custom checker is a code written by the problem setter to evaluate test case results and provide customized scoring logic.</span></p>\n<h2>Custom Checker Code</h2>\n<p><span style=\"font-weight: 400;\">Custom checker code consists of 3 parts. Two non-editable parts are referred to as a head &amp; tail section. The editable part of the custom checker is referred to as the body section. Body section has a method named run_custom_checker(). This method takes two arguments, a TestStructure object and a ResultStructure object. This method is executed after a candidate's submission is run. Each individual test case evaluates the candidate's submission results.</span></p>\n<p><span style=\"font-weight: 400;\"> <img src=\"https://support.hackerrank.com/hc/article_attachments/4402098712979/custom_checker.jpg\" alt=\"custom_checker.jpg\"></span></p>\n<h3>TestStructure::</h3>\n<table class=\"table\" style=\"height: 71px; width: 100%;\">\n<tbody>\n<tr>\n<td>testcase_id</td>\n<td>[int] ID of the test-case</td>\n</tr>\n<tr>\n<td>testcase_input_path</td>\n<td>\n<p>[str] File path to test-case input</p>\n</td>\n</tr>\n<tr>\n<td>testcase_output_path</td>\n<td>[str] File path to test-case output generated by the problem solver</td>\n</tr>\n<tr>\n<td>testcase_expected_output_path</td>\n<td>[str] File path to test-case expected output to be matched with</td>\n</tr>\n<tr>\n<td>metadata_file_paths</td>\n<td>[list&lt;str&gt;] File paths to Question metadata (Extra files usually used for defining training sets)</td>\n</tr>\n<tr>\n<td>submission_code_path</td>\n<td>[str] File path to submission source code</td>\n</tr>\n<tr>\n<td>testcase_result</td>\n<td>[bool] Set to True if test-case output matches test-case expected output. Matching is done line by line</td>\n</tr>\n<tr>\n<td>\n<p>testcase_signal</p>\n</td>\n<td>\n<p>[int] Exit code of the test-case process</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>testcase_time</p>\n</td>\n<td>[float] Time is taken by the test-case process in seconds</td>\n</tr>\n<tr>\n<td>\n<p>testcase_memory</p>\n</td>\n<td>[int] Peak memory of the test-case process determined in bytes</td>\n</tr>\n<tr>\n<td>\n<p>data</p>\n</td>\n<td>[str] &lt;Future use&gt;</td>\n</tr>\n</tbody>\n</table>\n<p> </p>\n<h3>ResultStructure::</h3>\n<table class=\"table\" style=\"height: 71px; width: 100%;\">\n<tbody>\n<tr>\n<td>result</td>\n<td>[bool]  Assign test-case result. True determines success. False determines a failure</td>\n</tr>\n<tr>\n<td>score</td>\n<td>\n<p>[float] Assign test-case score. Normalized between 0 to 1</p>\n</td>\n</tr>\n<tr>\n<td>message</td>\n<td>\n<p>[str] Assign test-case message. This message is visible to the problem solver.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p><span style=\"font-weight: 400;\">      </span></p>\n<p><span style=\"font-weight: 400;\">Test case result is determined by setting values of </span><span style=\"font-weight: 400;\">ResultStructure object.</span></p>\n<ol>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\"><strong>Result:</strong> Set this to True if a minimum cutoff score is achieved -- otherwise, False. This decides whether you have cleared this test case or not.</span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\"><strong>Score:</strong> This is a normalized score, where one would fetch the total score, and 0.5 would fetch half score.</span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\"><strong>message:</strong> This is a customizable message which can be used to convey a message regarding a test case result, e.g., “Failed because the cutoff was not reached.\"</span></li>\n</ol>\n<p class=\"box info\"><em><strong>Note: </strong></em><span style=\"font-weight: 400;\">Please don’t print anything to STDOUT in the </span><span style=\"font-weight: 400;\">run_custom_checker </span><span style=\"font-weight: 400;\">function</span><span style=\"font-weight: 400;\">.</span> </p>\n<h3>Custom-Checker for list of 5 prime numbers under 100 </h3>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">import</span> re\n<span style=\"color: #696969;\"># Function to determine if the given integer is a prime number</span>\n<span style=\"color: #800000; font-weight: bold;\">def</span> is_prime_number<span style=\"color: #808030;\">(</span>x<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">:</span>\n    <span style=\"color: #800000; font-weight: bold;\">if</span> x <span style=\"color: #44aadd;\">&gt;=</span> <span style=\"color: #008c00;\">2</span><span style=\"color: #808030;\">:</span>\n        <span style=\"color: #800000; font-weight: bold;\">for</span> y <span style=\"color: #800000; font-weight: bold;\">in</span> <span style=\"color: #400000;\">range</span><span style=\"color: #808030;\">(</span><span style=\"color: #008c00;\">2</span><span style=\"color: #808030;\">,</span> x<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">:</span>\n            <span style=\"color: #800000; font-weight: bold;\">if</span> <span style=\"color: #800000; font-weight: bold;\">not</span> x <span style=\"color: #44aadd;\">%</span> y<span style=\"color: #808030;\">:</span>\n                <span style=\"color: #800000; font-weight: bold;\">return</span> <span style=\"color: #074726;\">False</span>\n    <span style=\"color: #800000; font-weight: bold;\">else</span><span style=\"color: #808030;\">:</span>\n        <span style=\"color: #800000; font-weight: bold;\">return</span> <span style=\"color: #074726;\">False</span>\n    <span style=\"color: #800000; font-weight: bold;\">return</span> <span style=\"color: #074726;\">True</span>\n\n<span style=\"color: #800000; font-weight: bold;\">def</span> run_custom_checker<span style=\"color: #808030;\">(</span>t_obj<span style=\"color: #808030;\">,</span> r_obj<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">:</span>\n    result_data <span style=\"color: #808030;\">=</span> <span style=\"color: #0000e6;\">''</span>\n    <span style=\"color: #800000; font-weight: bold;\">try</span><span style=\"color: #808030;\">:</span>\n        result_data <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">open</span><span style=\"color: #808030;\">(</span>t_obj<span style=\"color: #808030;\">.</span>testcase_output_path<span style=\"color: #808030;\">,</span> <span style=\"color: #0000e6;\">'r'</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">.</span>read<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span>\n    <span style=\"color: #800000; font-weight: bold;\">except</span> <span style=\"color: #074726;\">IOError</span><span style=\"color: #808030;\">:</span>\n        r_obj<span style=\"color: #808030;\">.</span>result <span style=\"color: #808030;\">=</span> <span style=\"color: #074726;\">False</span>\n        r_obj<span style=\"color: #808030;\">.</span>score <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span>\n        r_obj<span style=\"color: #808030;\">.</span>message <span style=\"color: #808030;\">=</span> <span style=\"color: #0000e6;\">'Error reading result file'</span>\n        <span style=\"color: #800000; font-weight: bold;\">return</span>\n\n    <span style=\"color: #696969;\"># Read contents of the result file</span>\n    values <span style=\"color: #808030;\">=</span> re<span style=\"color: #808030;\">.</span>split<span style=\"color: #808030;\">(</span><span style=\"color: #0000e6;\">' |</span><span style=\"color: #0f69ff;\">\\n</span><span style=\"color: #0000e6;\">'</span><span style=\"color: #808030;\">,</span> result_data<span style=\"color: #808030;\">)</span>\n\n    <span style=\"color: #696969;\"># Make sure all the values are unique</span>\n    uniq_values <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">set</span><span style=\"color: #808030;\">(</span>values<span style=\"color: #808030;\">)</span>\n\n    <span style=\"color: #696969;\"># Count the number of primes</span>\n    correct_values <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span>\n    <span style=\"color: #800000; font-weight: bold;\">for</span> value <span style=\"color: #800000; font-weight: bold;\">in</span> uniq_values<span style=\"color: #808030;\">:</span>\n        <span style=\"color: #800000; font-weight: bold;\">if</span> value <span style=\"color: #800000; font-weight: bold;\">and</span> is_prime_number<span style=\"color: #808030;\">(</span><span style=\"color: #400000;\">int</span><span style=\"color: #808030;\">(</span>value<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">:</span>\n                correct_values <span style=\"color: #808030;\">=</span> correct_values <span style=\"color: #44aadd;\">+</span> <span style=\"color: #008c00;\">1</span>\n\n    <span style=\"color: #696969;\"># Cutoff score to determine success</span>\n    <span style=\"color: #800000; font-weight: bold;\">if</span> correct_values <span style=\"color: #44aadd;\">&gt;</span> <span style=\"color: #008c00;\">3</span><span style=\"color: #808030;\">:</span>\n        r_obj<span style=\"color: #808030;\">.</span>result <span style=\"color: #808030;\">=</span> <span style=\"color: #074726;\">True</span>\n    <span style=\"color: #800000; font-weight: bold;\">else</span><span style=\"color: #808030;\">:</span>\n        r_obj<span style=\"color: #808030;\">.</span>result <span style=\"color: #808030;\">=</span> <span style=\"color: #074726;\">False</span>\n    r_obj<span style=\"color: #808030;\">.</span>score <span style=\"color: #808030;\">=</span> correct_values <span style=\"color: #44aadd;\">/</span> <span style=\"color: #008c00;\">5</span>\n    r_obj<span style=\"color: #808030;\">.</span>message <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">str</span><span style=\"color: #808030;\">(</span>correct_values<span style=\"color: #808030;\">)</span> <span style=\"color: #44aadd;\">+</span> <span style=\"color: #0000e6;\">' out of 5 values are correct'</span>\n</pre>\n<h3>Result</h3>\n<p><strong><img src=\"https://support.hackerrank.com/hc/en-us/article_attachments/209814107/Screenshot_from_2016-07-20_12_56_08.png\" alt=\"\"></strong></p>\n<p> Here is a similar custom checker in Java - <a href=\"https://gist.github.com/patilarpith/7b17b5afb9218f770ebc528747017d25\">https://gist.github.com/patilarpith/7b17b5afb9218f770ebc528747017d25</a></p>","title":"Creating a Custom Checker"}