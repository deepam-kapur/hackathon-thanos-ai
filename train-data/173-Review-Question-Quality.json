{"url":"https://support.hackerrank.com/hc/en-us/articles/360013905053-Review-Question-Quality","body":"<h2><span style=\"font-weight: 400;\">Overview</span></h2>\n<p><span style=\"font-weight: 400;\">Question quality is important for making HackerRank tests more effective. The </span>Quality Review<span style=\"font-weight: 400;\"> page helps you to analyze the Coding Question based on the following four parameters:  </span></p>\n<ul>\n<li><span style=\"font-weight: 400;\">The overall number of test cases included</span></li>\n<li><span style=\"font-weight: 400;\">The number of ‘Sample test cases’ added</span></li>\n<li><span style=\"font-weight: 400;\">Whether the question uses auto-generated code stubs</span></li>\n<li><span style=\"font-weight: 400;\">Whether the question has descriptive tags</span></li>\n</ul>\n<p><span style=\"font-weight: 400;\">It would be best if you aimed to meet all 'high-quality' conditions on your Questions before using them in HackerRank tests and interviews. </span></p>\n<p><span style=\"font-weight: 400;\">You can view the question quality under the <strong>Quality Review</strong> tab, which displays while <a href=\"https://support.hackerrank.com/hc/en-us/articles/115006421707-Creating-a-Coding-Question\" target=\"_blank\" rel=\"noopener\">creating and editing coding Questions</a>. After you have added the problem statement, test cases, and code stubs to a Question, the last step involves reviewing the question quality and making any recommended changes to improve the question.</span></p>\n<p><strong>Prerequisites</strong></p>\n<p><span style=\"font-weight: 400;\">You must have a HackerRank for Work account.</span></p>\n<p><strong>Steps</strong></p>\n<ol>\n<li>From the <strong>HackerRank Library</strong> or from the <strong>Questions</strong> tab of a Test, click <strong>Create Question </strong>to create a new Question. Alternatively, from the <strong>Library</strong>, select your Question to edit and review quality.</li>\n<li>In the relevant Question tabs, define the <a href=\"https://support.hackerrank.com/hc/en-us/articles/115006427927-Defining-the-Problem-Statement-Coding-and-Database-Engineer-Questions\" target=\"_blank\" rel=\"noopener\">problem statement</a>, score, programming languages, <a href=\"https://support.hackerrank.com/hc/en-us/articles/115006430067-Coding-Question-Code-Stubs\" target=\"_blank\" rel=\"noopener\">code stubs</a>, and <a href=\"https://support.hackerrank.com/hc/en-us/articles/115006611728-Coding-Question-Test-Cases\" target=\"_blank\" rel=\"noopener\">test cases</a>.</li>\n<li>Proceed to the last step in the <strong>Quality Review</strong> tab.</li>\n</ol>\n<p>This page automatically generates and displays a quality review for your Question based on whether your Question includes the recommended number of sample and hidden test cases and auto-generated code stubs.</p>\n<p>You can follow the recommendations provided on the <strong>Quality Review</strong> page to improve your Question quality.</p>\n<p><img src=\"https://support.hackerrank.com/hc/article_attachments/360031718374/mceclip0.png\"></p>\n<center><em> The Question 'Quality Review' page </em></center>\n<p>The following sections in this article also guide you through the best practices and recommendations to be followed while creating your Questions in HackerRank for Work.</p>\n<h2>Understanding the Question Quality Parameters</h2>\n<ol>\n<li>\n<h3>\n<a name=\"1\"></a>The overall number of test cases in the Question</h3>\n</li>\n</ol>\n<p class=\"wysiwyg-indent3\"><span style=\"font-weight: 400;\">Adding Test cases ensures that a coding question is automatically evaluated. Without any test cases, a question will not be scored and might defeat the purpose of an assessment. Therefore, </span><span style=\"font-weight: 400;\">it is recommended that you add at least 3-4 sample test cases, of which 1-3 are present in the statement, and an overall 3-15 test cases of easy, medium, and hard difficulty levels to each Question.</span></p>\n<ol start=\"2\">\n<li>\n<h3>\n<a name=\"2\"></a>Sample test cases in the Question</h3>\n</li>\n</ol>\n<p class=\"wysiwyg-indent4\"><span style=\"font-weight: 400;\">Sample test cases improve question comprehension. It allows your candidates to quickly understand the Question and the expected output from their solution. This improves their likelihood of attempting the Question and adds to their positive test experience. </span><span style=\"font-weight: 400;\">It is recommended that you include at least two or more sample test cases in your Question.</span><span style=\"font-weight: 400;\">  </span></p>\n<ol start=\"3\">\n<li>\n<h3>Whether the question uses auto-generated code stubs</h3>\n</li>\n</ol>\n<p class=\"wysiwyg-indent2\"><span style=\"font-weight: 400;\">The best practice is using HackerRank’s auto-generated code stubs (or boilerplate code). Code stubs are recommended because they help your candidates to directly read input and write output using STDIN and STDOUT, respectively. This also helps prevent situations where a candidate writes the right code but fails to display the output correctly using STDOUT.</span></p>\n<p class=\"wysiwyg-indent2\"><span style=\"font-weight: 400;\">However, you may NOT be able to use HackerRank’s auto-generated code stubs in specific scenarios. For example, HackerRank does not provide auto-generated stubs for:</span></p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">reading in a binary tree or</span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">returning a class object from a function</span></li>\n</ul>\n<p class=\"wysiwyg-indent2\"><span style=\"font-weight: 400;\">You may also choose not to use the auto-generated code stubs in scenarios where you want the candidates to display their output in your desired format, and perhaps, you want to assess them on their ability to deal with STDIN and STDOUT. </span></p>\n<p class=\"wysiwyg-indent2\"><span style=\"font-weight: 400;\">In the above scenarios, you can retain the default code stubs, or you can choose to write your code stubs (user-modified code stubs) for all the programming languages you want to allow in your Tests. </span></p>\n<p class=\"box info\"><em class=\"icon-notification-info\"> </em><strong>Note</strong>: Writing your code stubs (user-modified code stubs) requires additional effort. However, once you write them, you can reuse them in the other Questions.</p>\n<ol start=\"4\">\n<li>\n<h3>Whether the questions have Descriptive tags</h3>\n</li>\n</ol>\n<p class=\"wysiwyg-indent2\"><span style=\"font-weight: 400;\"> According to best practices, every question needs to have at least two tags that describe and classify the question. Standard tags that need to be inserted into every question include the difficulty level: 'Easy, Medium, or Hard,' skills or area of expertise the question assesses: 'Algorithms, Problem Solving, Data Structures, and so on. Tags that further describe the question, such as specific concepts tested in the question, required knowledge, etc. </span></p>\n<p class=\"wysiwyg-indent2\"><span style=\"font-weight: 400;\"> Ensuring that your Question follows the above-mentioned best practices and recommendations helps create good quality questions. When good quality questions are a part of your Tests, it adds to your candidate’s positive experience and your Company's goal to attract and hire only the best talent.</span><span style=\"font-weight: 400;\"></span></p>\n<p><strong><em>Recommended Articles:</em></strong></p>\n<ul>\n<li><a href=\"https://support.hackerrank.com/hc/en-us/articles/220268767-Adding-Test-Cases-to-Coding-Questions\" target=\"_blank\" rel=\"noopener\">Adding Test Cases to Coding Questions</a></li>\n<li><a href=\"https://support.hackerrank.com/hc/en-us/articles/115006611728-Defining-Test-Cases-for-Coding-Questions\" target=\"_blank\" rel=\"noopener\">Defining Test Cases for Coding Questions</a></li>\n<li>\n<a href=\"https://support.hackerrank.com/hc/en-us/articles/115006430067-Coding-Question-Code-Stubs\" target=\"_blank\" rel=\"noopener\">Code Stubs</a><span style=\"font-weight: 400;\"> </span>\n</li>\n</ul>\n<p><span style=\"font-weight: 400;\"> </span></p>","title":"Review Question Quality"}