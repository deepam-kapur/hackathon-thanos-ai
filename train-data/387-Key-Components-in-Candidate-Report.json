{"url":"https://support.hackerrank.com/hc/en-us/articles/360042800834-Key-Components-in-Candidate-Report","body":"<h2><span style=\"font-weight: 400;\">Overview</span></h2>\n<p><span style=\"font-weight: 400;\">The detailed test report of candidates available on HackerRank for Work highlights some key components that help the hiring managers to make a more informed decision on the candidate’s approach to solving the coding challenge. Here is a quick guide that will help you understand these components better. This article will help you to understand the key components in a Candidate report. </span></p>\n<h2>Code Quality</h2>\n<p><span style=\"font-weight: 400;\">Code Quality is a loose approximation of how useful and maintainable the candidate’s code is in the long run. We use the SonarQube platform to continuously inspect candidate code and provide insights to hiring managers about the coding style of the candidate.</span></p>\n<p><span style=\"font-weight: 400;\">Presently, we support the code quality feature for these languages: C++, C++ (version 14), Python, Python (version 3), Java, Java (version 8), PHP, and JavaScript. </span></p>\n<h3>Benefits</h3>\n<p><span style=\"font-weight: 400;\">This feature enables hiring managers to make better hiring decisions based on the code quality report of the candidate. Below are some of the key pointers that the Code Quality Report highlights:</span><span style=\"font-weight: 400;\"><br></span></p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Duplicate blocks of codes</span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Number of non-useful comments in the code</span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Identifies the usefulness and maintainability of the solution in the long run.</span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Highlights coding errors that might lead to security vulnerability of the system</span></li>\n</ul>\n<h3>Customer Use Case 1</h3>\n<p><span style=\"font-weight: 400;\">John, a senior hiring manager uses the Code Quality Report during the technical hiring process in his organization. This feature helps him understand the refactoring techniques used by the candidate just by looking at the report. The code quality report helps in making the overall hiring process much faster and more efficient at his company.</span></p>\n<h3>Customer Use Case 2</h3>\n<p><span style=\"font-weight: 400;\">Paul, a Sr. Java Developer, who is a part of the technical hiring panel for his organization, was in charge of evaluating candidates for the Java Developer role. Below is a screenshot of the code quality report of one of the candidates. The clear feedback and recommendations on the coding approach taken by the candidate made the evaluation process easier and faster for Paul.</span></p>\n<p> </p>\n<p><span style=\"font-weight: 400;\"><img src=\"https://support.hackerrank.com/hc/article_attachments/360057514694/Code_Quality_Report.png\" alt=\"Code_Quality_Report.png\"></span></p>\n<h3>Viewing the Code Quality in the Report</h3>\n<p><img src=\"https://support.hackerrank.com/hc/article_attachments/4402035112851/ezgif.com-gif-maker__2_.gif\" alt=\"ezgif.com-gif-maker__2_.gif\"></p>\n<h2>\n<a name=\"s2\"></a>Code Playback</h2>\n<h3>What is Code playback?</h3>\n<p><span style=\"font-weight: 400;\">This feature helps in playing the recording of the candidate’s code submitted for a given HackerRank Assessment. We capture the code snippet written by the candidate whenever the candidate runs the code and display the playback in the report.</span></p>\n<h3>Benefits</h3>\n<p><span style=\"font-weight: 400;\">You can understand the thought process/approaches taken by the candidate while taking the coding challenge. </span></p>\n<h3>Customer Use Case 1</h3>\n<p><span style=\"font-weight: 400;\">In a particular hiring challenge, a question was there to find distinct pairs in a given array of integers. The code playback feature in one of the candidate’s reports showed that he first started solving the problem using an </span><em><span style=\"font-weight: 400;\">if-else </span></em><span style=\"font-weight: 400;\">statement but later changed it to a </span><em><span style=\"font-weight: 400;\">switch-case </span></em><span style=\"font-weight: 400;\">statement with a </span><em><span style=\"font-weight: 400;\">for </span></em><span style=\"font-weight: 400;\">increment loop. However, the final solution that he submitted had a function with a </span><em><span style=\"font-weight: 400;\">for</span></em><span style=\"font-weight: 400;\"> loop and a </span><em><span style=\"font-weight: 400;\">return </span></em><span style=\"font-weight: 400;\">statement. </span></p>\n<p><span style=\"font-weight: 400;\">This detailed report helped the hiring manager get a clear understanding of the various approaches taken by the candidate while solving the problem. </span></p>\n<h3>Viewing the Code Playback in the Report</h3>\n<p><img src=\"https://support.hackerrank.com/hc/article_attachments/4402047889299/ezgif.com-gif-maker__1_.gif\" alt=\"ezgif.com-gif-maker__1_.gif\"></p>\n<h2>\n<a name=\"s3\"></a>Code Optimality (Memory and Time Limit)</h2>\n<h3>What are Memory Limit and Time Limit?</h3>\n<p><span style=\"font-weight: 400;\">The HackerRank coding environment supports about 35 different programming languages, and for each language, there is a definite memory limit and a specific time limit for code execution. If the time taken by the compiler to read and process the candidate’s inputs and return output for all the test cases exceeds the time and memory limit specified for the chosen programming language, it gets captured in the detailed candidate report with the message “</span><em><span style=\"font-weight: 400;\">Terminated due to timeout</span></em><span style=\"font-weight: 400;\">”.</span></p>\n<p><span style=\"font-weight: 400;\">If the coding solution provided by the candidate is within the specified limit, it gets captured in the report with the message “</span><em><span style=\"font-weight: 400;\">Success</span></em><span style=\"font-weight: 400;\">”.</span></p>\n<p><span style=\"font-weight: 400;\">The test cases are designed in a way to follow specific constraints of memory and time limits on the HackerRank platform. Executing the code under the specified limits would yield successful results. For Example, a sorting question with a hard test case associated with it with a threshold of (</span><span style=\"font-weight: 400;\">10</span><span style=\"font-weight: 400;\">8 </span><span style=\"font-weight: 400;\">) will fail in 4 seconds which is the upper limit if executed in Java.</span></p>\n<p><span style=\"font-weight: 400;\">Please refer to </span><a href=\"https://www.hackerrank.com/environment/languages\" target=\"_blank\" rel=\"noopener\">HackerRank Coding Environment Specifications Page</a><span style=\"font-weight: 400;\"> to know more about the specific memory and time limit allotted to any given language.</span></p>\n<h3>Benefits</h3>\n<h4>\n<span style=\"font-weight: 400;\">The “</span><em><span style=\"font-weight: 400;\">terminated due to timeout</span></em><span style=\"font-weight: 400;\">” error typically implies that the submitted solution is not optimized enough and there is room for improvement in the candidate’s code.</span>\n</h4>\n<p><span style=\"font-weight: 400;\">When multiple candidates submit a correct answer, the memory and time limit error comes in handy in identifying the candidate with a more optimal solution.</span></p>\n<h3>Customer Use Case</h3>\n<p><span style=\"font-weight: 400;\">In a particular coding assessment, there was a question that required candidates to sort large data sets using an efficient sorting algorithm. While reviewing the candidate reports, Phillip, the hiring manager found that candidate A received </span><em><span style=\"font-weight: 400;\">terminated due to a timeout </span></em><span style=\"font-weight: 400;\">error while candidate B’s solution was a </span><em><span style=\"font-weight: 400;\">success.</span></em></p>\n<p><span style=\"font-weight: 400;\">Upon digging deeper into the code, it was found that candidate A used the bubble sort technique which is an iterative process of sorting that is O(</span><span style=\"font-weight: 400;\">n</span><span style=\"font-weight: 400;\">2</span><span style=\"font-weight: 400;\">), </span><span style=\"font-weight: 400;\"> while B used merge sort which </span><span style=\"font-weight: 400;\">uses a recursive process that is O(N log N)</span><span style=\"font-weight: 400;\">. I</span><span style=\"font-weight: 400;\">n this case, the complexity of bubble sort is higher than merge sort due to the large dataset and hence candidate’s A report showed timeout issues while executing test cases due to complexity and slower sorting, compared to candidate’s B report who used merge sort which was faster and executed all the test cases in the given time.</span></p>\n<h3>Verifying Code Optimality in the Report</h3>\n<p>Case 1 - When a candidate's code exceeds the memory or time limit.</p>\n<p><strong><img src=\"https://support.hackerrank.com/hc/article_attachments/360057515154/Memory_Taken_failed__Snag.gif\" alt=\"Memory_Taken_failed__Snag.gif\"></strong></p>\n<p>Case 2 - When a candidate's code is within the memory or time limit.</p>\n<p><strong><img src=\"https://support.hackerrank.com/hc/article_attachments/360057516074/Memory_Taken_passed_snag-min.gif\" alt=\"Memory_Taken_passed_snag-min.gif\"></strong></p>\n<h2>\n<a name=\"s4\"></a>Plagiarism Detection</h2>\n<h3>What is HackerRank’s take on plagiarism?</h3>\n<p><span style=\"font-weight: 400;\">HackerRank for work uses a comprehensive and swift plagiarism detection methodology with the goal to identify candidate submissions with the likelihood of plagiarism by determining if codes are similar. We optimize our algorithms for candidate experience and reduce false alarms so that no candidate is wrongly penalized.</span></p>\n<p><span style=\"font-weight: 400;\">Our Plagiarism Detector uses a derivative of the </span><a href=\"https://theory.stanford.edu/~aiken/moss/\" target=\"_blank\" rel=\"noopener\">Moss <span style=\"font-weight: 400;\">algorithm</span></a><span style=\"font-weight: 400;\"> to report the following in a candidate’s test report. </span></p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Any overlap in code submitted by different Candidates within the same test as well as across all submissions on the HRW platform.</span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Replicated code from original sources on the internet.</span></li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Code which is reproduced by changing the variable names, formats, etc.</span></li>\n</ul>\n<p><span style=\"font-weight: 400;\">Learn more about how we detect plagiarism in the candidate’s code </span><a href=\"https://support.hackerrank.com/hc/en-us/articles/115005603547-Plagiarism-detection\" target=\"_blank\" rel=\"noopener\">here</a><strong>.</strong></p>\n<h3>Benefits</h3>\n<p><span style=\"font-weight: 400;\">Plagiarism Detection at HackerRank for Work detects candidates who have the same structure of code and logic used but could have changed variable names, looping constructs, and more. </span></p>\n<p><span style=\"font-weight: 400;\">Our improved plagiarism detection algorithms compare candidate codes across all submissions that are available on the HackerRank for Work platform and provide you with a more comprehensive and accurate report. </span></p>\n<p><span style=\"font-weight: 400;\"><strong>Note:</strong> Although we detect code similarity, we cannot determine the reason for code similarity. This is to help you in saving time as we point out the cases that are worth a detailed examination. </span></p>\n<h3>Customer Use Case 1</h3>\n<p><span style=\"font-weight: 400;\">Sania who works as a Sr. Software Engineer evaluates tests for junior developers/freshers for her organization. As the test is for junior developers or freshers it contains basic coding questions to check the coding capability of the candidate. One of the questions in the test was “Fibonacci Series” for which she found out that one of the candidate's test reports was flagged for plagiarism. However, while checking the code Sania was able to understand that since the problem statement is simple and there are only a few ways in which this question can be solved he chose to ignore the plagiarism flag and recommended his team to go forward with the candidate for further rounds of interview.</span></p>\n<h3>Customer Use Case 2</h3>\n<p><span style=\"font-weight: 400;\">Vanessa who works as an Engineering Lead evaluates tests for senior developers for her organization. The test is designed in such a way to test some deeper algorithms and data structure concepts of the candidate. One of the questions in the test is to perform a binary search on a given dataset. To find out more accurate plagiarism reports for candidates, Vanessa has taken the test and submitted the code as a dummy candidate by copying the code of binary search available online. </span></p>\n<p><span style=\"font-weight: 400;\">When she was reviewing the candidate report for candidate A, she found out that the code was flagged for plagiarism against the dummy candidate that Vanessa used while taking the test. This helped her understand that the code was copied from an online source and she chose not to go forward with further rounds of interviews for that candidate.</span><strong><br></strong></p>\n<h3>Viewing Plagiarism Report</h3>\n<p><img src=\"https://support.hackerrank.com/hc/article_attachments/4402035218067/ezgif.com-gif-maker__4_.gif\" alt=\"ezgif.com-gif-maker__4_.gif\"></p>","title":"Key Components in Candidate Report"}